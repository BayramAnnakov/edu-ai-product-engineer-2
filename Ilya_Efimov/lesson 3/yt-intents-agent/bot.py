import asyncio
import logging
import re
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, validate_config
from main import YouTubeIntentsAgent
from utils.url_parser import extract_channel_id_from_url
from config import YOUTUBE_API_KEY

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class YouTubeBotHandler:
    def __init__(self):
        self.waiting_for_channel = False
        self.agent = None
        
    def extract_youtube_url_from_message(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç YouTube URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        youtube_patterns = [
            r'https?://(?:www\.)?youtube\.com/[@\w\-\.]+',
            r'https?://(?:www\.)?youtube\.com/c/[\w\-\.]+',
            r'https?://(?:www\.)?youtube\.com/channel/[\w\-]+',
            r'https?://(?:www\.)?youtube\.com/user/[\w\-\.]+',
            r'@[\w\-\.]+',
            r'UC[\w\-]+'
        ]
        
        for pattern in youtube_patterns:
            match = re.search(pattern, text)
            if match:
                return match.group()
        return None
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YouTube Analysis Bot!

–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ YouTube –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç—ã.

–ö–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ  
/analyze - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∫–∞–Ω–∞–ª, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π!"""
        
        await update.message.reply_text(welcome_message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üîó –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã YouTube —Å—Å—ã–ª–æ–∫:
‚Ä¢ https://www.youtube.com/@username
‚Ä¢ https://www.youtube.com/c/channelname  
‚Ä¢ https://www.youtube.com/channel/UC...
‚Ä¢ https://www.youtube.com/user/username
‚Ä¢ @username
‚Ä¢ UC... (Channel ID)

‚öôÔ∏è –ß—Ç–æ —è –¥–µ–ª–∞—é:
‚Ä¢ –°–æ–±–∏—Ä–∞—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é –∏—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä—É—é –ø–æ—Ö–æ–∂–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç

–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª!"""
        
        await update.message.reply_text(help_text)
    
    async def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze"""
        self.waiting_for_channel = True
        await update.message.reply_text(
            "üîç –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ https://www.youtube.com/@channelname\n"
            "‚Ä¢ @channelname\n" 
            "‚Ä¢ https://www.youtube.com/channel/UC...\n\n"
            "–û—Ç–º–µ–Ω–∞: /cancel"
        )
    
    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–∞"""
        self.waiting_for_channel = False
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ YouTube URL
        youtube_url = self.extract_youtube_url_from_message(text)
        
        if youtube_url:
            await self.process_youtube_channel(update, youtube_url)
        else:
            await update.message.reply_text(
                "‚ùì –ù–µ –Ω–∞—à–µ–ª —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∫–∞–Ω–∞–ª –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    async def process_youtube_channel(self, update: Update, channel_input):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ YouTube –∫–∞–Ω–∞–ª–∞"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            status_message = await update.message.reply_text(
                f"üîÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞: `{channel_input}`\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...", 
                parse_mode='Markdown'
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º Channel ID
            if channel_input.startswith('UC'):
                channel_id = channel_input
            else:
                channel_id = extract_channel_id_from_url(channel_input, YOUTUBE_API_KEY)
            
            if not channel_id:
                await status_message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∫–∞–Ω–∞–ª–∞ –∏–∑: `{channel_input}`\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode='Markdown'
                )
                return
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            import config
            old_channel_id = config.YOUTUBE_CHANNEL_ID
            config.YOUTUBE_CHANNEL_ID = channel_id
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                await status_message.edit_text(
                    f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: `{channel_id}`\n"
                    "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...", 
                    parse_mode='Markdown'
                )
                
                agent = YouTubeIntentsAgent()
                result = await agent.process_comments()
                
                await status_message.edit_text(
                    f"üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                    f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
                )
                
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª
                config.YOUTUBE_CHANNEL_ID = old_channel_id
                
        except Exception as e:
            logger.error(f"Error processing channel {channel_input}: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–∞:\n`{str(e)}`",
                parse_mode='Markdown'
            )
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")

async def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    app = None
    try:
        validate_config()
        logger.info("Configuration validated successfully")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        handler = YouTubeBotHandler()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", handler.start))
        app.add_handler(CommandHandler("help", handler.help_command))
        app.add_handler(CommandHandler("analyze", handler.analyze_command))
        app.add_handler(CommandHandler("cancel", handler.cancel_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handler.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        app.add_error_handler(handler.error_handler)
        
        logger.info("Starting Telegram bot...")
        await app.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except ValueError as e:
        logger.error(f"Configuration error: {e}")
        print(f"Configuration error: {e}")
        print("Please check your .env file and ensure all required variables are set.")
        
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        print(f"Unexpected error: {e}")
        
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if app:
            try:
                await app.shutdown()
            except:
                pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")

if __name__ == "__main__":
    main()