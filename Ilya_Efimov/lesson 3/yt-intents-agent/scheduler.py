import asyncio
import logging
from datetime import datetime, timedelta
from telegram import Bot
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import json
import os

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class WeeklyScheduler:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.schedule_file = "schedule_state.json"
        self.last_request_time = self.load_last_request_time()
    
    def load_last_request_time(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.schedule_file):
                with open(self.schedule_file, 'r') as f:
                    data = json.load(f)
                    return datetime.fromisoformat(data.get('last_request_time', '2000-01-01'))
            return datetime(2000, 1, 1)  # –î–∞–ª–µ–∫–æ–µ –ø—Ä–æ—à–ª–æ–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        except Exception as e:
            logger.error(f"Error loading schedule state: {e}")
            return datetime(2000, 1, 1)
    
    def save_last_request_time(self, timestamp):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'last_request_time': timestamp.isoformat(),
                'next_request_time': (timestamp + timedelta(weeks=1)).isoformat()
            }
            with open(self.schedule_file, 'w') as f:
                json.dump(data, f, indent=2)
        except Exception as e:
            logger.error(f"Error saving schedule state: {e}")
    
    def should_send_weekly_request(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Å—É–±–±–æ—Ç—É –≤ 9 —É—Ç—Ä–∞ UTC+3"""
        from datetime import timezone
        
        # UTC+3 timezone
        utc_plus_3 = timezone(timedelta(hours=3))
        now = datetime.now(utc_plus_3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞ (weekday() == 5) –∏ –≤—Ä–µ–º—è >= 9:00
        if now.weekday() != 5:  # –ù–µ —Å—É–±–±–æ—Ç–∞
            return False
            
        if now.hour < 9:  # –ï—â–µ –Ω–µ 9 —É—Ç—Ä–∞
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—É–±–±–æ—Ç—É –≤ 9:00
        days_since_saturday = (now.weekday() + 2) % 7  # 0 = —Å—É–±–±–æ—Ç–∞
        last_saturday_9am = now.replace(hour=9, minute=0, second=0, microsecond=0) - timedelta(days=days_since_saturday)
        
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞ –ø–æ—Å–ª–µ 9 —É—Ç—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
        if now.weekday() == 5 and now.hour >= 9:
            current_saturday_9am = now.replace(hour=9, minute=0, second=0, microsecond=0)
            return self.last_request_time < current_saturday_9am
        
        return self.last_request_time < last_saturday_9am
    
    def get_next_saturday_9am_utc3(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π —Å—É–±–±–æ—Ç—ã –≤ 9:00 UTC+3"""
        from datetime import timezone
        
        utc_plus_3 = timezone(timedelta(hours=3))
        now = datetime.now(utc_plus_3)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—É–±–±–æ—Ç—ã
        days_until_saturday = (5 - now.weekday()) % 7  # 5 = —Å—É–±–±–æ—Ç–∞
        
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞, –Ω–æ –µ—â–µ –Ω–µ 9:00, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è
        if now.weekday() == 5 and now.hour < 9:
            next_saturday = now.replace(hour=9, minute=0, second=0, microsecond=0)
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞ –∏ —É–∂–µ –ø–æ—Å–ª–µ 9:00, —Å–ª–µ–¥—É—é—â–∞—è —Å—É–±–±–æ—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
        elif now.weekday() == 5:
            next_saturday = (now + timedelta(weeks=1)).replace(hour=9, minute=0, second=0, microsecond=0)
        # –ò–Ω–∞—á–µ –Ω–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Å—É–±–±–æ—Ç—É
        else:
            if days_until_saturday == 0:  # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–∞ —Å—É–±–±–æ—Ç–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
                days_until_saturday = 7
            next_saturday = (now + timedelta(days=days_until_saturday)).replace(hour=9, minute=0, second=0, microsecond=0)
        
        return next_saturday
    
    async def send_weekly_request(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            message = """üóì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ YouTube –∫–∞–Ω–∞–ª–æ–≤
‚è∞ –ö–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É –≤ 9:00 (UTC+3)

–ö–∞–∫–æ–π –∫–∞–Ω–∞–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? 

–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∫–∞–Ω–∞–ª:
‚Ä¢ https://www.youtube.com/@channelname
‚Ä¢ @channelname  
‚Ä¢ https://www.youtube.com/channel/UC...

–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç! üìä"""

            await self.bot.send_message(
                chat_id=TELEGRAM_CHAT_ID,
                text=message
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            now = datetime.now()
            self.save_last_request_time(now)
            self.last_request_time = now
            
            logger.info("Weekly request sent successfully")
            return True
            
        except Exception as e:
            logger.error(f"Error sending weekly request: {e}")
            return False
    
    async def run_scheduler_check(self):
        """–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        if self.should_send_weekly_request():
            logger.info("Time for weekly request - sending...")
            await self.send_weekly_request()
        else:
            next_saturday = self.get_next_saturday_9am_utc3()
            logger.info(f"Next weekly request scheduled for: {next_saturday.strftime('%Y-%m-%d %H:%M UTC+3 (Saturday)')}")
    
    async def run_continuous_scheduler(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ)"""
        logger.info("Starting continuous weekly scheduler...")
        
        while True:
            try:
                await self.run_scheduler_check()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
                await asyncio.sleep(3600)  # 1 hour
                
            except Exception as e:
                logger.error(f"Error in continuous scheduler: {e}")
                await asyncio.sleep(300)  # Wait 5 minutes on error

class SchedulerManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö"""
    
    @staticmethod
    async def run_once():
        """–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        scheduler = WeeklyScheduler()
        await scheduler.run_scheduler_check()
    
    @staticmethod 
    async def run_continuous():
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        scheduler = WeeklyScheduler()
        await scheduler.run_continuous_scheduler()
    
    @staticmethod
    async def force_send_request():
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        scheduler = WeeklyScheduler()
        result = await scheduler.send_weekly_request()
        if result:
            print("‚úÖ Weekly request sent successfully")
        else:
            print("‚ùå Failed to send weekly request")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "once":
            asyncio.run(SchedulerManager.run_once())
        elif sys.argv[1] == "force":
            asyncio.run(SchedulerManager.force_send_request())
        elif sys.argv[1] == "continuous":
            asyncio.run(SchedulerManager.run_continuous())
        else:
            print("Usage: python scheduler.py [once|force|continuous]")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        asyncio.run(SchedulerManager.run_once())