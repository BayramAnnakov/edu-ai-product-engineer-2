#!/usr/bin/env python3
"""
Test sentiment analysis fixes with problematic reviews
"""

import sys
import os
sys.path.append('src')

from analyzers.deterministic import analyze_sentiment
from analyzers.llm_analyzer import llm_analyze
from agents.sentiment_agent import SentimentAgent

def test_problematic_reviews():
    """Test fixes on problematic reviews"""
    
    # The problematic review from the report
    problematic_review = "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π—Ç–µ –∑–¥–µ—Å—å —É—á–∏—Ç—å—Å—è, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–µ–¥–µ–ª—è–º–∏, –∏ –ø–∏—à–µ—Ç —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–º –≤ 48 —á–∞—Å–æ–≤, –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–∞–¥–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ—Ç—Å—Ç–æ–π, —Å–¥–µ–ª–∞–ª –¥–∑ –æ–Ω–æ —É—à–ª–æ, –ø–æ—Ç–æ–º —Å–Ω–æ–≤–∞ –ø–æ—è–≤–∏–ª–æ—Å—å, –ø—Ä–æ–¥–∞–∂–Ω–∏–∫ –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–∫–µ –≤–∞–º –ø—Ä—è–º –≤–ø–∞—Ä–∏—Ç —ç—Ç–∏ —É—Ä–æ–∫–∏ –∏ –Ω–∞ –ø–æ–¥–æ–ª—å—à–µ, –Ω–µ –±–µ—Ä–∏—Ç–µ –Ω–∞ –≥–æ–¥ –∏–ª–∏ 6 –º–µ—Å—è—Ü–µ–≤ —Ç–æ—á–Ω–æ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ..."
    
    test_reviews = [
        ("–û—Ç–ª–∏—á–Ω–æ üëæüëæüëæ", "POSITIVE"),  # Should be positive
        (problematic_review, "NEGATIVE"),  # Should be negative (was neutral)
        ("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ–µ. –î–∑ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≥–¥–µ —É–≥–æ–¥–Ω–æ!!!", "POSITIVE"),  # Should be positive
        ("–Ω–æ—á—å—é –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—á–∏—Ç—å", "NEGATIVE"),  # Should be negative
        ("–ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —á–∞—Å—Ç–æ –∫–æ—Å—è—á–Ω—ã–π", "NEGATIVE"),  # Should be negative
    ]
    
    agent = SentimentAgent()
    
    print("üß™ Testing Sentiment Analysis Fixes on Problematic Reviews:")
    print("=" * 80)
    
    correct_det = 0
    correct_llm = 0
    correct_agent = 0
    
    for i, (review, expected) in enumerate(test_reviews):
        print(f"\nTest {i+1}: {review[:70]}...")
        print(f"Expected: {expected}")
        
        # Deterministic analysis
        det_result = analyze_sentiment(review)
        det_sentiment = det_result['sentiment']
        det_correct = det_sentiment == expected
        if det_correct:
            correct_det += 1
        print(f"  NLTK: {det_sentiment} {'‚úÖ' if det_correct else '‚ùå'}")
        
        # LLM analysis
        llm_result = llm_analyze(review)
        llm_sentiment = llm_result.get('sentiment', 'Unknown')
        # Normalize for comparison
        llm_sentiment_normalized = llm_sentiment.upper() if llm_sentiment else 'UNKNOWN'
        llm_correct = llm_sentiment_normalized == expected
        if llm_correct:
            correct_llm += 1
        print(f"  LLM: {llm_sentiment} {'‚úÖ' if llm_correct else '‚ùå'}")
        
        # Agent analysis
        agent_result = agent.analyze(review)
        agent_sentiment = agent_result['sentiment']
        agent_correct = agent_sentiment == expected
        if agent_correct:
            correct_agent += 1
        print(f"  Agent: {agent_sentiment} {'‚úÖ' if agent_correct else '‚ùå'}")
    
    print("\n" + "=" * 80)
    print(f"üìä Accuracy Results:")
    print(f"  NLTK: {correct_det}/{len(test_reviews)} ({(correct_det/len(test_reviews))*100:.1f}%)")
    print(f"  LLM: {correct_llm}/{len(test_reviews)} ({(correct_llm/len(test_reviews))*100:.1f}%)")
    print(f"  Agent: {correct_agent}/{len(test_reviews)} ({(correct_agent/len(test_reviews))*100:.1f}%)")
    
    # Special test for the problematic review
    print(f"\nüéØ Special Test - Problematic Review:")
    print(f"Review: {problematic_review[:100]}...")
    
    det_result = analyze_sentiment(problematic_review)
    llm_result = llm_analyze(problematic_review)
    agent_result = agent.analyze(problematic_review)
    
    print(f"  NLTK: {det_result['sentiment']} (was NEUTRAL)")
    print(f"  LLM: {llm_result.get('sentiment', 'Unknown')} (was unknown)")
    print(f"  Agent: {agent_result['sentiment']} (was NEUTRAL)")
    
    all_negative = all(result['sentiment'].upper() == 'NEGATIVE' for result in [det_result, {'sentiment': llm_result.get('sentiment', '')}, agent_result])
    print(f"  All methods detect as NEGATIVE: {'‚úÖ' if all_negative else '‚ùå'}")
    
    return correct_det, correct_llm, correct_agent

if __name__ == "__main__":
    test_problematic_reviews()