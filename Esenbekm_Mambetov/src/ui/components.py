"""UI components for the Streamlit dashboard."""

import streamlit as st
import pandas as pd
from typing import Optional

from ..models.review import ReviewsData
from ..models.summary import ComparisonResult
from ..config.settings import UIConfig


class UIComponents:
    """Reusable UI components for the dashboard."""
    
    @staticmethod
    def render_page_header():
        """Render the main page header."""
        st.markdown(UIConfig.CUSTOM_CSS, unsafe_allow_html=True)
        st.markdown(
            '<h1 class="main-header">üìä MBank Reviews Analysis Dashboard</h1>', 
            unsafe_allow_html=True
        )
    
    
    @staticmethod
    def render_summary_comparison(results: Optional[ComparisonResult]):
        """
        Render summary comparison section.
        
        Args:
            results: ComparisonResult object or None
        """
        if not results:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—é–º–µ.")
            return
        
        st.header("üìù –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üîç –ò–∑–≤–ª–µ–∫–∞—é—â–µ–µ —Ä–µ–∑—é–º–µ (Deterministic)")
            extractive = results.extractive_summary
            st.markdown(f"""
            <div class="summary-box">
                <p><strong>–¢–µ–∫—Å—Ç:</strong> {extractive.text}</p>
                <p><strong>–°–ª–æ–≤:</strong> {extractive.word_count}</p>
                <p><strong>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:</strong> {extractive.sentence_count}</p>
                <p><strong>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</strong> {extractive.processing_time:.2f}—Å</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.subheader("ü§ñ –ê–±—Å—Ç—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ (GPT-4)")
            abstractive = results.abstractive_summary
            st.markdown(f"""
            <div class="summary-box">
                <p><strong>–¢–µ–∫—Å—Ç:</strong> {abstractive.text}</p>
                <p><strong>–°–ª–æ–≤:</strong> {abstractive.word_count}</p>
                <p><strong>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:</strong> {abstractive.sentence_count}</p>
                <p><strong>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</strong> {abstractive.processing_time:.2f}—Å</p>
            </div>
            """, unsafe_allow_html=True)
    
    @staticmethod
    def render_metrics_dashboard(results: Optional[ComparisonResult]):
        """
        Render metrics dashboard.
        
        Args:
            results: ComparisonResult object or None
        """
        if not results or not results.comparison_metrics:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return
        
        st.header("üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        metrics = results.comparison_metrics
        evaluation = results.evaluation_report
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                value=f"{metrics.content_overlap:.3f}",
                help="–î–æ–ª—è –æ–±—â–∏—Ö —Å–ª–æ–≤ –º–µ–∂–¥—É —Ä–µ–∑—é–º–µ"
            )
        
        with col2:
            st.metric(
                label="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª–∏–Ω—ã",
                value=f"{metrics.length_ratio:.3f}",
                help="–û—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∞–±—Å—Ç—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫ –∏–∑–≤–ª–µ–∫–∞—é—â–µ–º—É"
            )
        
        with col3:
            st.metric(
                label="–û—Ü–µ–Ω–∫–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏",
                value=f"{metrics.readability_score:.3f}",
                help="–û—Ü–µ–Ω–∫–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∞–±—Å—Ç—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ"
            )
        
        with col4:
            preferred = evaluation.get_preferred_summary() if evaluation else '–ù/–î'
            st.metric(
                label="–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ",
                value=preferred.title() if preferred and preferred != '–ù/–î' else '–ù/–î',
                help="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∏–ø —Ä–µ–∑—é–º–µ"
            )
    
    @staticmethod
    def render_reviews_table(reviews_data: Optional[ReviewsData]):
        """
        Render reviews table with filters.
        
        Args:
            reviews_data: ReviewsData object or None
        """
        if not reviews_data or not reviews_data.reviews:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return
        
        st.header("üì± –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # Convert to DataFrame
        df = pd.DataFrame([review.to_dict() for review in reviews_data.reviews])
        
        # Add filters
        col1, col2 = st.columns(2)
        
        with col1:
            rating_filter = st.multiselect(
                "–§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:",
                options=sorted(df['rating'].unique()),
                default=sorted(df['rating'].unique())
            )
        
        with col2:
            search_text = st.text_input("–ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–∑—ã–≤–æ–≤:")
        
        # Apply filters
        filtered_df = df[df['rating'].isin(rating_filter)]
        
        if search_text:
            filtered_df = filtered_df[
                filtered_df['text'].str.contains(search_text, case=False, na=False)
            ]
        
        # Display statistics
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", len(df))
        with col2:
            st.metric("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ", len(filtered_df))
        with col3:
            avg_rating = filtered_df['rating'].mean() if len(filtered_df) > 0 else 0
            st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥", f"{avg_rating:.1f}")
        
        # Display table
        st.dataframe(
            filtered_df[['rating', 'author', 'date', 'text']],
            use_container_width=True,
            hide_index=True
        )
    
    @staticmethod
    def render_project_overview(reviews_data: Optional[ReviewsData], results: Optional[ComparisonResult]):
        """
        Render enhanced project overview section with comprehensive insights.
        
        Args:
            reviews_data: ReviewsData object or None
            results: ComparisonResult object or None
        """
        st.header("üìä –û–±–∑–æ—Ä –∞–Ω–∞–ª–∏–∑–∞ MBank Reviews")
        
        if not reviews_data or not reviews_data.reviews:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞.")
            return
        
        # Key Statistics Section
        st.subheader("üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        
        reviews = reviews_data.reviews
        total_reviews = len(reviews)
        avg_rating = sum(r.rating for r in reviews) / total_reviews if reviews else 0
        
        # Rating distribution
        rating_counts = {}
        for r in reviews:
            rating_counts[r.rating] = rating_counts.get(r.rating, 0) + 1
        
        positive_reviews = sum(rating_counts.get(i, 0) for i in [4, 5])
        negative_reviews = sum(rating_counts.get(i, 0) for i in [1, 2])
        neutral_reviews = rating_counts.get(3, 0)
        
        # Display key metrics in columns
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            st.metric(
                label="üìä –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤",
                value=f"{total_reviews:,}",
                help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"
            )
        
        with col2:
            st.metric(
                label="‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥",
                value=f"{avg_rating:.1f}/5",
                delta=f"{avg_rating - 3:.1f}" if avg_rating != 3 else None,
                help="–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            )
        
        with col3:
            positive_pct = (positive_reviews / total_reviews * 100) if total_reviews > 0 else 0
            st.metric(
                label="üëç –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ",
                value=f"{positive_reviews:,} ({positive_pct:.1f}%)",
                help="–û—Ç–∑—ã–≤—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º 4-5 –∑–≤–µ–∑–¥"
            )
        
        with col4:
            negative_pct = (negative_reviews / total_reviews * 100) if total_reviews > 0 else 0
            st.metric(
                label="üëé –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ", 
                value=f"{negative_reviews:,} ({negative_pct:.1f}%)",
                help="–û—Ç–∑—ã–≤—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º 1-2 –∑–≤–µ–∑–¥—ã"
            )
        
        with col5:
            neutral_pct = (neutral_reviews / total_reviews * 100) if total_reviews > 0 else 0
            st.metric(
                label="üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ",
                value=f"{neutral_reviews:,} ({neutral_pct:.1f}%)",
                help="–û—Ç–∑—ã–≤—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º 3 –∑–≤–µ–∑–¥—ã"
            )
        
        st.markdown("---")
        
        # App Information Section
        st.subheader("üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if reviews_data.metadata:
                metadata = reviews_data.metadata
                st.markdown(f"""
                <div class="metric-card">
                    <h4>üìã –î–µ—Ç–∞–ª–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
                    <p><strong>üè¶ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</strong> {metadata.app_id}</p>
                    <p><strong>üåç –†–µ–≥–∏–æ–Ω:</strong> {metadata.country.upper()}</p>
                    <p><strong>üó£Ô∏è –Ø–∑—ã–∫:</strong> {metadata.language}</p>
                    <p><strong>üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:</strong> {metadata.scraped_at[:19].replace('T', ' ')}</p>
                    <p><strong>‚è±Ô∏è –ü–µ—Ä–∏–æ–¥:</strong> –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã</p>
                </div>
                """, unsafe_allow_html=True)
        
        with col2:
            # Analysis insights
            sentiment_emoji = "üòä" if avg_rating >= 4 else "üòê" if avg_rating >= 3 else "üòû"
            trend_analysis = "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è" if positive_reviews > negative_reviews else "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è" if negative_reviews > positive_reviews else "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è"
            
            st.markdown(f"""
            <div class="metric-card">
                <h4>üîç –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h4>
                <p><strong>üéØ –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</strong> {sentiment_emoji} {trend_analysis.title()}</p>
                <p><strong>üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</strong> {positive_pct:.0f}% –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö, {negative_pct:.0f}% –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö</p>
                <p><strong>üî• –°–∞–º—ã–π —á–∞—Å—Ç—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</strong> {max(rating_counts.items(), key=lambda x: x[1])[0]}‚≠ê</p>
                <p><strong>üìà –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:</strong> –í—ã—Å–æ–∫–æ–µ ({total_reviews} –æ—Ç–∑—ã–≤–æ–≤)</p>
                <p><strong>‚ö° –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å:</strong> –°–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ</p>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        # Summary Analysis Section
        if results:
            st.subheader("ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ò–ò-–∞–Ω–∞–ª–∏–∑–∞")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üîç –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (–ò–∑–≤–ª–µ–∫–∞—é—â–∏–π –º–µ—Ç–æ–¥)**")
                extractive = results.extractive_summary
                # Show first 200 characters of extractive summary
                preview_text = extractive.text[:200] + "..." if len(extractive.text) > 200 else extractive.text
                st.markdown(f"""
                <div class="summary-box">
                    <p>{preview_text}</p>
                    <small>üìä {extractive.word_count} —Å–ª–æ–≤ ‚Ä¢ ‚è±Ô∏è {extractive.processing_time:.2f}—Å</small>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown("**ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑ (–ê–±—Å—Ç—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)**")
                abstractive = results.abstractive_summary
                # Show first 200 characters of abstractive summary  
                preview_text = abstractive.text[:200] + "..." if len(abstractive.text) > 200 else abstractive.text
                st.markdown(f"""
                <div class="summary-box">
                    <p>{preview_text}</p>
                    <small>üìä {abstractive.word_count} —Å–ª–æ–≤ ‚Ä¢ ‚è±Ô∏è {abstractive.processing_time:.2f}—Å</small>
                </div>
                """, unsafe_allow_html=True)
            
            # Comparison metrics
            if results.comparison_metrics:
                st.markdown("**üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏**")
                
                col1, col2, col3, col4 = st.columns(4)
                
                metrics = results.comparison_metrics
                evaluation = results.evaluation_report
                
                with col1:
                    overlap_pct = metrics.content_overlap * 100
                    st.metric(
                        "üîó –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                        f"{overlap_pct:.1f}%",
                        help="–°—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–∏–ø–∞–º–∏ —Ä–µ–∑—é–º–µ"
                    )
                
                with col2:
                    st.metric(
                        "üìè –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª–∏–Ω—ã",
                        f"{metrics.length_ratio:.2f}",
                        help="–û—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –ò–ò-—Ä–µ–∑—é–º–µ –∫ –∏–∑–≤–ª–µ–∫–∞—é—â–µ–º—É"
                    )
                
                with col3:
                    readability_pct = metrics.readability_score * 100
                    st.metric(
                        "üìö –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å",
                        f"{readability_pct:.0f}%",
                        help="–û—Ü–µ–Ω–∫–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –ò–ò-—Ä–µ–∑—é–º–µ"
                    )
                
                with col4:
                    preferred = evaluation.get_preferred_summary() if evaluation else '–ù/–î'
                    emoji = "ü§ñ" if preferred == "abstractive" else "üîç" if preferred == "extractive" else "‚ùì"
                    st.metric(
                        "üèÜ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
                        f"{emoji} {preferred.title() if preferred != '–ù/–î' else '–ù/–î'}",
                        help="–õ—É—á—à–∏–π —Ç–∏–ø —Ä–µ–∑—é–º–µ –ø–æ –æ—Ü–µ–Ω–∫–µ –ò–ò"
                    )
        
        else:
            st.info("üîÑ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ò-–∏–Ω—Å–∞–π—Ç–æ–≤.")
        
        st.markdown("---")
        
        # Action Recommendations
        st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        recommendations = []
        
        if negative_pct > 50:
            recommendations.append("üö® **–ö—Ä–∏—Ç–∏—á–Ω–æ:** –ë–æ–ª–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        elif negative_pct > 30:
            recommendations.append("‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.")
        
        if avg_rating < 3:
            recommendations.append("üìâ **–ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥:** –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –Ω–∏–∂–µ 3 –∑–≤–µ–∑–¥. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è.")
        elif avg_rating < 4:
            recommendations.append("üìà **–£–ª—É—á—à–µ–Ω–∏–µ:** –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–æ 4+ –∑–≤–µ–∑–¥.")
        
        if positive_pct > 60:
            recommendations.append("‚úÖ **–ü–æ–∑–∏—Ç–∏–≤–Ω–æ:** –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–≤–æ–ª—å–Ω—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.")
        
        recommendations.append("üìä **–ê–Ω–∞–ª–∏–∑:** –ò–∑—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤–æ –≤–∫–ª–∞–¥–∫–µ '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞' –¥–ª—è –≥–ª—É–±–∏–Ω–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è.")
        recommendations.append("üìù **–†–µ–∑—é–º–µ:** –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º –≤–æ –≤–∫–ª–∞–¥–∫–µ '–†–µ–∑—é–º–µ' –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤.")
        
        for i, rec in enumerate(recommendations, 1):
            st.markdown(f"{i}. {rec}")
        
        if results and results.evaluation_report:
            reasoning = results.evaluation_report.analysis.get('reasoning', '')
            if reasoning and reasoning != '–ù/–î':
                st.markdown(f"ü§ñ **–ò–ò-–æ—Ü–µ–Ω–∫–∞:** {reasoning}")
    
    
