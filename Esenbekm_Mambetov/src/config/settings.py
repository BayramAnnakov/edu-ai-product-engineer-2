import os
from pathlib import Path
from typing import Dict, Any


class AppConfig:
    """Application configuration constants and settings."""
    
    # Application metadata
    APP_TITLE = "üìä MBank Reviews Analysis Dashboard"
    APP_ICON = "üìä"
    DEFAULT_APP_ID = "com.maanavan.mb_kyrgyzstan"
    
    # Dashboard settings
    DEFAULT_PORT = 8501
    DEFAULT_HOST = "localhost"
    
    # Review analysis settings
    DEFAULT_REVIEW_COUNT = 100
    MIN_REVIEW_COUNT = 10
    MAX_REVIEW_COUNT = 1000
    DEFAULT_LANGUAGE = "ru"
    DEFAULT_COUNTRY = "kg"
    
    # File paths
    RESULTS_DIR = "results"
    DEFAULT_REVIEWS_FILE = "results/mbank_reviews.json"
    DEFAULT_RESULTS_FILE = "results/summary_comparison_results.json"
    
    # Processing settings
    BATCH_SIZE = 200
    MAX_REVIEWS_LIMIT = 10000
    
    # UI settings
    LAYOUT = "wide"
    SIDEBAR_STATE = "expanded"


class SummarizationConfig:
    """Configuration for summarization algorithms."""
    
    # Extractive summarization
    EXTRACTIVE_SENTENCE_COUNT = 3
    EXTRACTIVE_LANGUAGE = "russian"
    
    # GPT settings
    GPT_MODEL = "gpt-4"
    GPT_MAX_TOKENS = 500
    GPT_TEMPERATURE = 0.3
    
    # OpenAI Agents SDK settings
    AGENT_MODEL = "gpt-4"
    AGENT_TEMPERATURE = 0.3
    AGENT_MAX_TOKENS = 1000
    AGENT_TIMEOUT = 60  # seconds
    
    # Analysis prompts
    SUMMARIZATION_PROMPT = """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç–∑—ã–≤—ã –æ –º–æ–±–∏–ª—å–Ω–æ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ MBank –∏ —Å–æ–∑–¥–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤:

    {reviews_text}

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –∫–æ—Ç–æ—Ä–æ–µ –≤–∫–ª—é—á–∞–µ—Ç:
    1. –û—Å–Ω–æ–≤–Ω—ã–µ –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    2. –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    3. –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ–º—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    4. –û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    –†–µ–∑—é–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    
    EVALUATION_PROMPT = """
    –°—Ä–∞–≤–Ω–∏—Ç–µ –¥–≤–∞ —Ä–µ–∑—é–º–µ –æ—Ç–∑—ã–≤–æ–≤ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ MBank:

    –ò–∑–≤–ª–µ–∫–∞—é—â–µ–µ —Ä–µ–∑—é–º–µ: {extractive_summary}
    –ê–±—Å—Ç—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ: {abstractive_summary}

    –û—Ü–µ–Ω–∏—Ç–µ –∏—Ö –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –¥–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:
    1. –ü–æ–ª–Ω–æ—Ç–∞ –æ—Ö–≤–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    2. –Ø—Å–Ω–æ—Å—Ç—å –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
    3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π

    –û—Ç–≤–µ—Ç—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
    {{
        "analysis": {{
            "extractive_coverage": "–æ—Ü–µ–Ω–∫–∞ 1-10",
            "abstractive_coverage": "–æ—Ü–µ–Ω–∫–∞ 1-10", 
            "extractive_clarity": "–æ—Ü–µ–Ω–∫–∞ 1-10",
            "abstractive_clarity": "–æ—Ü–µ–Ω–∫–∞ 1-10",
            "preferred_summary": "extractive/abstractive",
            "reasoning": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞"
        }}
    }}
    """


class UIConfig:
    """UI styling and layout configuration."""
    
    CUSTOM_CSS = """
    <style>
        .main-header {
            font-size: 2.5rem;
            color: #1f77b4;
            text-align: center;
            margin-bottom: 2rem;
        }
        .metric-card {
            background-color: rgb(14, 17, 23);;
            padding: 1rem;
            border-radius: 10px;
            border-left: 5px solid #1f77b4;
        }
        .summary-box {
            background-color: rgb(14, 17, 23);
            padding: 1.5rem;
            border-radius: 10px;
            border: 1px solid #e0e0e0;
            margin: 1rem 0;
        }
        .review-item {
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            margin: 0.5rem 0;
            border-left: 3px solid #28a745;
        }
    </style>
    """
    
    # Chart color schemes
    RATING_COLOR_SCALE = "RdYlGn"
    
    # Tab names
    TAB_NAMES = [
        "üìä –û–±–∑–æ—Ä", 
        "üìù –†–µ–∑—é–º–µ", 
        "üì± –û—Ç–∑—ã–≤—ã", 
        "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", 
        "üöÄ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"
    ]


def get_env_var(var_name: str, default: Any = None) -> Any:
    """Get environment variable with optional default value."""
    return os.getenv(var_name, default)


def load_env_file():
    """Load environment variables from .env file if it exists."""
    env_file = Path(__file__).parent.parent.parent / ".env"
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()


def get_openai_config() -> Dict[str, Any]:
    """Get OpenAI configuration from environment."""
    load_env_file()
    return {
        "api_key": get_env_var("OPENAI_API_KEY"),
        "model": get_env_var("OPENAI_MODEL", SummarizationConfig.GPT_MODEL),
        "max_tokens": int(get_env_var("OPENAI_MAX_TOKENS", SummarizationConfig.GPT_MAX_TOKENS)),
        "temperature": float(get_env_var("OPENAI_TEMPERATURE", SummarizationConfig.GPT_TEMPERATURE))
    }