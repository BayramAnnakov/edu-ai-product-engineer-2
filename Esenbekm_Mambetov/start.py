#!/usr/bin/env python3
"""
Start script for MBank Reviews Analysis System.
Ensures analysis is completed before running dashboard.
"""

import sys
import os
import subprocess
import argparse

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.config.settings import AppConfig, get_openai_config
from src.services.data_service import DataService
from src.utils.logger import Logger


def check_analysis_status():
    """Check if analysis has been completed."""
    data_service = DataService()
    has_reviews = data_service.file_exists(AppConfig.DEFAULT_REVIEWS_FILE)
    has_results = data_service.file_exists(AppConfig.DEFAULT_RESULTS_FILE)
    return has_reviews and has_results


def check_openai_config():
    """Check if OpenAI is configured."""
    config = get_openai_config()
    return config.get('api_key') is not None


def run_analysis(review_count=None):
    """Run analysis using the CLI."""
    logger = Logger.setup_logger()
    
    count = review_count or AppConfig.DEFAULT_REVIEW_COUNT
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count})...")
    logger.info(f"Starting analysis with {count} reviews")
    
    if not check_openai_config():
        print("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º API –∫–ª—é—á–æ–º:")
        print("   cp .env.example .env")
        print("   # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ –¥–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY=your_key")
        logger.error("OpenAI API key not found")
        return False
    
    logger.info("OpenAI configuration validated")
    
    try:
        print("üìä –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑...")
        print("   - –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ Google Play")
        print("   - –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–≤–ª–µ–∫–∞—é—â–∏—Ö —Ä–µ–∑—é–º–µ")
        print("   - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—é–º–µ —Å GPT-4")
        print("   - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        logger.info("Starting subprocess for analysis")
        result = subprocess.run([
            sys.executable, "main.py", "analyze",
            "--app-id", AppConfig.DEFAULT_APP_ID,
            "--count", str(count)
        ], check=True, capture_output=True, text=True)
        
        # Log subprocess output
        if result.stdout:
            logger.info(f"Analysis stdout: {result.stdout}")
        if result.stderr:
            logger.warning(f"Analysis stderr: {result.stderr}")
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info("Analysis completed successfully")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        print(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e.returncode}")
        if e.stdout:
            print(f"–í—ã–≤–æ–¥: {e.stdout}")
        if e.stderr:
            print(f"–û—à–∏–±–∫–∏: {e.stderr}")
        
        logger.error(f"Analysis failed with return code {e.returncode}")
        logger.error(f"stdout: {e.stdout}")
        logger.error(f"stderr: {e.stderr}")
        return False


def run_dashboard():
    """Run the dashboard."""
    print("üåê –ó–∞–ø—É—Å–∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    try:
        subprocess.run([sys.executable, "run_dashboard.py"])
    except KeyboardInterrupt:
        print("\nüõë –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


def main():
    """Main workflow."""
    parser = argparse.ArgumentParser(
        description="MBank Reviews Analysis System - Complete Workflow",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python start.py                    # Default 100 reviews
  python start.py --count 50         # Analyze 50 reviews
  python start.py --count 200        # Analyze 200 reviews
  python start.py --force-new        # Force new analysis
        """
    )
    
    parser.add_argument(
        '--count',
        type=int,
        default=AppConfig.DEFAULT_REVIEW_COUNT,
        help=f'Number of reviews to analyze (default: {AppConfig.DEFAULT_REVIEW_COUNT})'
    )
    
    parser.add_argument(
        '--force-new',
        action='store_true',
        help='Force new analysis even if data exists'
    )
    
    parser.add_argument(
        '--no-dashboard',
        action='store_true',
        help='Run analysis only, skip dashboard'
    )
    
    args = parser.parse_args()
    
    # Setup logging
    logger = Logger.setup_logger()
    
    print("="*60)
    print("üìä MBank Reviews Analysis System")
    print("="*60)
    
    logger.info(f"Starting with parameters: count={args.count}, force_new={args.force_new}, no_dashboard={args.no_dashboard}")
    
    # Check if analysis is already complete
    analysis_exists = check_analysis_status()
    
    if analysis_exists and not args.force_new:
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {args.count} –æ—Ç–∑—ã–≤–æ–≤")
        
        if not args.no_dashboard:
            response = input("üîÑ –•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑? (y/N): ").lower()
        else:
            response = 'y'
        
        if response in ['y', 'yes', '–¥–∞']:
            # Remove existing files
            try:
                if os.path.exists(AppConfig.DEFAULT_REVIEWS_FILE):
                    os.remove(AppConfig.DEFAULT_REVIEWS_FILE)
                    logger.info("Removed existing reviews file")
                if os.path.exists(AppConfig.DEFAULT_RESULTS_FILE):
                    os.remove(AppConfig.DEFAULT_RESULTS_FILE)
                    logger.info("Removed existing results file")
                print("üóëÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
                logger.error(f"Error removing files: {e}")
            
            # Run new analysis
            if not run_analysis(args.count):
                return
        else:
            print("üìä –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
            logger.info("Using existing analysis results")
    else:
        if args.force_new:
            print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            logger.info("Forced new analysis requested")
        else:
            print("‚è≥ –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")
            logger.info("No existing analysis found, starting new analysis")
        
        if not run_analysis(args.count):
            return
    
    if not args.no_dashboard:
        print("\n" + "="*60)
        print("üéØ –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤! –ó–∞–ø—É—Å–∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        print("üìä URL: http://localhost:8501")
        print("üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("="*60)
        
        # Run dashboard
        run_dashboard()
    else:
        print("\n" + "="*60)
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON —Ñ–∞–π–ª—ã")
        print("üåê –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python run_dashboard.py")
        print("="*60)
        logger.info("Analysis completed, dashboard skipped")


if __name__ == "__main__":
    main()