#!/usr/bin/env python3
"""
Refactored Streamlit Dashboard for Hybrid Summarization System.
Clean architecture with separated concerns and proper error handling.
"""

import streamlit as st
import sys
import os

# Add src to path for imports
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.config.settings import AppConfig
from src.services.data_service import DataService
from src.ui.components import UIComponents
from src.utils.charts import ChartUtils
from src.utils.logger import Logger


def configure_page():
    """Configure Streamlit page settings."""
    st.set_page_config(
        page_title=AppConfig.APP_TITLE,
        page_icon=AppConfig.APP_ICON,
        layout=AppConfig.LAYOUT,
        initial_sidebar_state=AppConfig.SIDEBAR_STATE
    )


def check_analysis_status():
    """Check if analysis has been completed."""
    data_service = DataService()
    
    # Check if both reviews and results files exist
    has_reviews = data_service.file_exists(AppConfig.DEFAULT_REVIEWS_FILE)
    has_results = data_service.file_exists(AppConfig.DEFAULT_RESULTS_FILE)
    
    return has_reviews and has_results


def load_data():
    """Load data from default files only."""
    data_service = DataService()
    
    reviews_data = None
    results_data = None
    
    # Load from default files only
    if data_service.file_exists(AppConfig.DEFAULT_REVIEWS_FILE):
        reviews_data = data_service.load_reviews_data(AppConfig.DEFAULT_REVIEWS_FILE)
    
    if data_service.file_exists(AppConfig.DEFAULT_RESULTS_FILE):
        results_data = data_service.load_results_data(AppConfig.DEFAULT_RESULTS_FILE)
    
    analysis_complete = reviews_data is not None and results_data is not None
    
    return reviews_data, results_data, analysis_complete


def render_overview_tab(reviews_data, results_data):
    """Render overview tab."""
    UIComponents.render_project_overview(reviews_data, results_data)


def render_summary_tab(results_data):
    """Render summary comparison tab."""
    UIComponents.render_summary_comparison(results_data)


def render_reviews_tab(reviews_data):
    """Render reviews table tab."""
    UIComponents.render_reviews_table(reviews_data)


def render_analytics_tab(reviews_data, results_data):
    """Render analytics tab with charts."""
    st.header("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    if reviews_data and reviews_data.reviews:
        reviews = reviews_data.reviews
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Rating distribution
            fig_rating = ChartUtils.create_rating_distribution_chart(reviews)
            st.plotly_chart(fig_rating, use_container_width=True)
            
            # Sentiment summary
            fig_sentiment = ChartUtils.create_sentiment_summary_chart(reviews)
            st.plotly_chart(fig_sentiment, use_container_width=True)
        
        with col2:
            # Timeline
            fig_timeline = ChartUtils.create_timeline_chart(reviews)
            st.plotly_chart(fig_timeline, use_container_width=True)
            
            # Rating trend
            fig_trend = ChartUtils.create_rating_trend_chart(reviews)
            st.plotly_chart(fig_trend, use_container_width=True)
        
        # Comparison metrics radar chart
        if results_data:
            fig_comparison = ChartUtils.create_comparison_metrics_chart(results_data)
            st.plotly_chart(fig_comparison, use_container_width=True)
    else:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")


def render_no_data_screen():
    """Render screen when no analysis data is available."""
    st.markdown("""
    # üìä MBank Reviews Analysis Dashboard
    
    ## ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    
    –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.
    
    ### üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø—É—Å–∫—É –∞–Ω–∞–ª–∏–∑–∞:
    
    ```bash
    # 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenAI API –∫–ª—é—á
    cp .env.example .env
    # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á
    
    # 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑
    python main.py analyze --app-id com.maanavan.mb_kyrgyzstan --count 100
    
    # 3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    python run_dashboard.py
    ```
    
    ### üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:
    ```bash
    python start.py  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–∞–Ω–µ–ª–∏
    ```
    
    ---
    
    **–û–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã:**
    - `results/mbank_reviews.json` - –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–æ–≤
    - `results/summary_comparison_results.json` - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    
    –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±–Ω–æ–≤–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É.
    """)


def main():
    """Main dashboard function."""
    # Initialize logger
    Logger.setup_logger()
    logger = Logger.get_logger()
    
    try:
        # Configure page
        configure_page()
        
        # Render header
        UIComponents.render_page_header()
        
        # Load data and check analysis status
        reviews_data, results_data, analysis_complete = load_data()
        
        # Sidebar with status only
        st.sidebar.title("üìä –°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞")
        
        if analysis_complete:
            st.sidebar.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            if reviews_data and reviews_data.metadata:
                st.sidebar.info(f"üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {reviews_data.metadata.app_id}")
                st.sidebar.info(f"üìä –û—Ç–∑—ã–≤–æ–≤: {reviews_data.metadata.total_reviews}")
                st.sidebar.info(f"üìÖ –î–∞—Ç–∞: {reviews_data.metadata.scraped_at[:10]}")
        else:
            st.sidebar.error("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            st.sidebar.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ CLI")
        
        # Conditional rendering based on analysis status
        if not analysis_complete:
            # Show no data screen with instructions
            render_no_data_screen()
        else:
            # Show full dashboard with navigation tabs
            tab1, tab2, tab3, tab4 = st.tabs([
                "üìä –û–±–∑–æ—Ä", "üìù –†–µ–∑—é–º–µ", "üì± –û—Ç–∑—ã–≤—ã", "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
            ])
            
            with tab1:
                render_overview_tab(reviews_data, results_data)
            
            with tab2:
                render_summary_tab(results_data)
            
            with tab3:
                render_reviews_tab(reviews_data)
            
            with tab4:
                render_analytics_tab(reviews_data, results_data)
        
        # Footer
        st.sidebar.markdown("---")
        st.sidebar.markdown("**üìä MBank Reviews Analysis**")
        st.sidebar.markdown("Read-only dashboard")
        
    except Exception as e:
        logger.error(f"Dashboard error: {str(e)}")
        st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")


if __name__ == "__main__":
    main()